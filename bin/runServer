#!/usr/bin/env node

const fs = require('fs');
const path = require('path');
const debug = require('debug')('blueprints-discovery:server');
const https = require('https');
let confs = JSON.parse(fs.readFileSync('./servers.json', 'utf-8'));

const basePort = normalizePort(process.env.PORT || '3000');

// select some servers on the command line
const args = process.argv.slice(2);

confs.forEach((conf, idx) => {
  if (args.length && args.indexOf(conf.name) === -1)
    return;
  const bin = require(path.join('..', conf.bin));
  bin.set('port', basePort + idx);
  if (bin.configure)
    bin.configure(); // 'cause appStoreServer requires an init call (with optional config).
  const server = https.createServer({
    key: fs.readFileSync('server.key'),
    cert: fs.readFileSync('server.cert')
  }, bin);
  server.listen(basePort + idx);
  server.on('error', onError);
  server.on('listening', onListening);


  function onError(error) {
    if (error.syscall !== 'listen') {
      throw error;
    }

    const bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
    }
  }

  function onListening() {
    const addr = server.address();
    const bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Listening on ' + bind);
  }
});

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}
