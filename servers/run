#!/usr/bin/env node

const Fs = require('fs');
const Path = require('path');
const Debug = require('debug');
let confs = JSON.parse(Fs.readFileSync('./servers.json', 'utf-8'));

const basePort = normalizePort(process.env.PORT || '3000');

// select some servers on the command line
const args = process.argv.slice(2);

Object.keys(confs).forEach((key, idx) => {
  const conf = confs[key];
  if (args.length && args.indexOf(key) === -1)
    return;
  const bin = require(Path.join('..', conf.bin));
  const message = Debug(key);
  const error = message.extend('error');
  bin.set('port', basePort + idx);
  if (bin.configure)
    bin.configure(null, args); // 'cause appStoreServer requires a configure call (with optional config).
  const server = conf.protocol === 'http'
        ? require('http').createServer(bin) // For HTTP, server is first parameter.
        : require('https').createServer({ // For HTTPS, server is second parameter!
          key: Fs.readFileSync(conf.keyFilePath),
          cert: Fs.readFileSync(conf.certFilePath)
        }, bin);

  server.listen(basePort + idx);
  const addr = server.address();
  const hostStr = addr.address === '::' ? 'localhost' : addr.address;
  const portStr = addr.port === 80 ? '' : ':' + addr.port;
  const base = new URL(`${conf.protocol}://${hostStr}${portStr}/`);
  if (bin.setBase)
    bin.setBase(server, base);
  else
    server.on('listening', onListening);

  server.on('error', onError);

  function onError(e) {
    if (e.syscall !== 'listen') {
      throw error;
    }

    const bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (e.code) {
    case 'EACCES':
      error(`${base.href} requires elevated privileges`);
      process.exit(1);
      break;
    case 'EADDRINUSE':
      error(`${base.href} is already in use`);
      process.exit(1);
      break;
    default:
      throw error;
    }
  }

  function onListening() {
    message(`Listening on ${base.href}`);
  }
});

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}
